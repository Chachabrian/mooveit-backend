name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: mooveit-backend
  AWS_REGION: us-east-1
  ECR_REPOSITORY: mooveit-backend
  EC2_INSTANCE_TAG_KEY: Name
  EC2_INSTANCE_TAG_VALUE: mooveit-backend-instance

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env.production file
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env.production
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.production
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.production
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "GIN_MODE=${{ secrets.GIN_MODE || 'release' }}" >> .env.production

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate timestamp for image tag
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Build and push Docker image to Amazon ECR
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.timestamp.outputs.timestamp }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up SSM for EC2 deployment
        run: |
          aws ssm get-command-invocation --command-id "dummy" || echo "SSM is ready to use"
          
      - name: Get EC2 instance IDs
        id: get-instances
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:${{ env.EC2_INSTANCE_TAG_KEY }},Values=${{ env.EC2_INSTANCE_TAG_VALUE }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          echo "instance_ids=${INSTANCE_IDS// /,}" >> $GITHUB_OUTPUT
          if [ -z "$INSTANCE_IDS" ]; then
            echo "No running instances found with specified tag"
            exit 1
          fi

      - name: Deploy to EC2 instances via SSM
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          docker stop ${{ env.SERVICE_NAME }} || true
          docker rm ${{ env.SERVICE_NAME }} || true
          docker run -d \
            --name ${{ env.SERVICE_NAME }} \
            --restart unless-stopped \
            -p 80:${{ secrets.PORT || 8080 }} \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          EOL

          for INSTANCE_ID in $(echo ${{ steps.get-instances.outputs.instance_ids }} | tr ',' ' '); do
            aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --parameters "commands=[$(cat deploy.sh | jq -Rs .)]" \
              --comment "Deploy latest version of ${{ env.SERVICE_NAME }}" \
              --output text
            echo "Deployment command sent to instance $INSTANCE_ID"
          done

      - name: Show deployment completion message
        run: echo "Deployment to EC2 instances completed. Check the AWS EC2 console or connect to instances to verify deployment."
